/* automatically generated by rust-bindgen 0.68.1 */

pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const HTS_COPYRIGHT : & [u8 ; 236] = b"The HMM-Based Speech Synthesis Engine \"hts_engine API\"\nVersion 1.09 (http://hts-engine.sourceforge.net/)\nCopyright (C) 2001-2014 Nagoya Institute of Technology\n              2001-2008 Tokyo Institute of Technology\nAll rights reserved.\n\0" ;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type HTS_Boolean = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Audio {
    pub sampling_frequency: usize,
    pub max_buff_size: usize,
    pub buff: *mut ::std::os::raw::c_short,
    pub buff_size: usize,
    pub audio_interface: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HTS_Audio() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Audio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Audio>(),
        40usize,
        concat!("Size of: ", stringify!(_HTS_Audio))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Audio>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Audio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_frequency) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Audio),
            "::",
            stringify!(sampling_frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_buff_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Audio),
            "::",
            stringify!(max_buff_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Audio),
            "::",
            stringify!(buff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buff_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Audio),
            "::",
            stringify!(buff_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_interface) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Audio),
            "::",
            stringify!(audio_interface)
        )
    );
}
pub type HTS_Audio = _HTS_Audio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Window {
    pub size: usize,
    pub l_width: *mut ::std::os::raw::c_int,
    pub r_width: *mut ::std::os::raw::c_int,
    pub coefficient: *mut *mut f64,
    pub max_width: usize,
}
#[test]
fn bindgen_test_layout__HTS_Window() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Window> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Window>(),
        40usize,
        concat!("Size of: ", stringify!(_HTS_Window))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Window>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Window))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Window),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Window),
            "::",
            stringify!(l_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Window),
            "::",
            stringify!(r_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coefficient) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Window),
            "::",
            stringify!(coefficient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Window),
            "::",
            stringify!(max_width)
        )
    );
}
pub type HTS_Window = _HTS_Window;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Pattern {
    pub string: *mut ::std::os::raw::c_char,
    pub next: *mut _HTS_Pattern,
}
#[test]
fn bindgen_test_layout__HTS_Pattern() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Pattern> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Pattern>(),
        16usize,
        concat!("Size of: ", stringify!(_HTS_Pattern))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Pattern>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Pattern))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Pattern),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Pattern),
            "::",
            stringify!(next)
        )
    );
}
pub type HTS_Pattern = _HTS_Pattern;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Question {
    pub string: *mut ::std::os::raw::c_char,
    pub head: *mut HTS_Pattern,
    pub next: *mut _HTS_Question,
}
#[test]
fn bindgen_test_layout__HTS_Question() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Question> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Question>(),
        24usize,
        concat!("Size of: ", stringify!(_HTS_Question))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Question>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Question))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Question),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Question),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Question),
            "::",
            stringify!(next)
        )
    );
}
pub type HTS_Question = _HTS_Question;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Node {
    pub index: ::std::os::raw::c_int,
    pub pdf: usize,
    pub yes: *mut _HTS_Node,
    pub no: *mut _HTS_Node,
    pub next: *mut _HTS_Node,
    pub quest: *mut HTS_Question,
}
#[test]
fn bindgen_test_layout__HTS_Node() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Node>(),
        48usize,
        concat!("Size of: ", stringify!(_HTS_Node))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Node>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(pdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(yes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quest) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Node),
            "::",
            stringify!(quest)
        )
    );
}
pub type HTS_Node = _HTS_Node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Tree {
    pub head: *mut HTS_Pattern,
    pub next: *mut _HTS_Tree,
    pub root: *mut HTS_Node,
    pub state: usize,
}
#[test]
fn bindgen_test_layout__HTS_Tree() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Tree> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Tree>(),
        32usize,
        concat!("Size of: ", stringify!(_HTS_Tree))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Tree>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Tree))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Tree),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Tree),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Tree),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Tree),
            "::",
            stringify!(state)
        )
    );
}
pub type HTS_Tree = _HTS_Tree;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Model {
    pub vector_length: usize,
    pub num_windows: usize,
    pub is_msd: HTS_Boolean,
    pub ntree: usize,
    pub npdf: *mut usize,
    pub pdf: *mut *mut *mut f32,
    pub tree: *mut HTS_Tree,
    pub question: *mut HTS_Question,
}
#[test]
fn bindgen_test_layout__HTS_Model() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Model> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Model>(),
        64usize,
        concat!("Size of: ", stringify!(_HTS_Model))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Model>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Model))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(vector_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_windows) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(num_windows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_msd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(is_msd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ntree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(ntree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npdf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(npdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(pdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).question) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Model),
            "::",
            stringify!(question)
        )
    );
}
pub type HTS_Model = _HTS_Model;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_ModelSet {
    pub hts_voice_version: *mut ::std::os::raw::c_char,
    pub sampling_frequency: usize,
    pub frame_period: usize,
    pub num_voices: usize,
    pub num_states: usize,
    pub num_streams: usize,
    pub stream_type: *mut ::std::os::raw::c_char,
    pub fullcontext_format: *mut ::std::os::raw::c_char,
    pub fullcontext_version: *mut ::std::os::raw::c_char,
    pub gv_off_context: *mut HTS_Question,
    pub option: *mut *mut ::std::os::raw::c_char,
    pub duration: *mut HTS_Model,
    pub window: *mut HTS_Window,
    pub stream: *mut *mut HTS_Model,
    pub gv: *mut *mut HTS_Model,
}
#[test]
fn bindgen_test_layout__HTS_ModelSet() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_ModelSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_ModelSet>(),
        120usize,
        concat!("Size of: ", stringify!(_HTS_ModelSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_ModelSet>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_ModelSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hts_voice_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(hts_voice_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_frequency) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(sampling_frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_period) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(frame_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_voices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(num_voices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_states) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(num_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_streams) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(num_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullcontext_format) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(fullcontext_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullcontext_version) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(fullcontext_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_off_context) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(gv_off_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_ModelSet),
            "::",
            stringify!(gv)
        )
    );
}
pub type HTS_ModelSet = _HTS_ModelSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_LabelString {
    pub next: *mut _HTS_LabelString,
    pub name: *mut ::std::os::raw::c_char,
    pub start: f64,
    pub end: f64,
}
#[test]
fn bindgen_test_layout__HTS_LabelString() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_LabelString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_LabelString>(),
        32usize,
        concat!("Size of: ", stringify!(_HTS_LabelString))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_LabelString>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_LabelString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_LabelString),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_LabelString),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_LabelString),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_LabelString),
            "::",
            stringify!(end)
        )
    );
}
pub type HTS_LabelString = _HTS_LabelString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Label {
    pub head: *mut HTS_LabelString,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__HTS_Label() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Label> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Label>(),
        16usize,
        concat!("Size of: ", stringify!(_HTS_Label))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Label>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Label))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Label),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Label),
            "::",
            stringify!(size)
        )
    );
}
pub type HTS_Label = _HTS_Label;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_SStream {
    pub vector_length: usize,
    pub mean: *mut *mut f64,
    pub vari: *mut *mut f64,
    pub msd: *mut f64,
    pub win_size: usize,
    pub win_l_width: *mut ::std::os::raw::c_int,
    pub win_r_width: *mut ::std::os::raw::c_int,
    pub win_coefficient: *mut *mut f64,
    pub win_max_width: usize,
    pub gv_mean: *mut f64,
    pub gv_vari: *mut f64,
    pub gv_switch: *mut HTS_Boolean,
}
#[test]
fn bindgen_test_layout__HTS_SStream() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_SStream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_SStream>(),
        96usize,
        concat!("Size of: ", stringify!(_HTS_SStream))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_SStream>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_SStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(vector_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vari) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(vari)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(msd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(win_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_l_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(win_l_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_r_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(win_r_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_coefficient) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(win_coefficient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_max_width) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(win_max_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_mean) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(gv_mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_vari) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(gv_vari)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_switch) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStream),
            "::",
            stringify!(gv_switch)
        )
    );
}
pub type HTS_SStream = _HTS_SStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_SStreamSet {
    pub sstream: *mut HTS_SStream,
    pub nstream: usize,
    pub nstate: usize,
    pub duration: *mut usize,
    pub total_state: usize,
    pub total_frame: usize,
}
#[test]
fn bindgen_test_layout__HTS_SStreamSet() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_SStreamSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_SStreamSet>(),
        48usize,
        concat!("Size of: ", stringify!(_HTS_SStreamSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_SStreamSet>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_SStreamSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(sstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(nstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(total_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_frame) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SStreamSet),
            "::",
            stringify!(total_frame)
        )
    );
}
pub type HTS_SStreamSet = _HTS_SStreamSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_SMatrices {
    pub mean: *mut *mut f64,
    pub ivar: *mut *mut f64,
    pub g: *mut f64,
    pub wuw: *mut *mut f64,
    pub wum: *mut f64,
}
#[test]
fn bindgen_test_layout__HTS_SMatrices() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_SMatrices> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_SMatrices>(),
        40usize,
        concat!("Size of: ", stringify!(_HTS_SMatrices))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_SMatrices>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_SMatrices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SMatrices),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ivar) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SMatrices),
            "::",
            stringify!(ivar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SMatrices),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wuw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SMatrices),
            "::",
            stringify!(wuw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_SMatrices),
            "::",
            stringify!(wum)
        )
    );
}
pub type HTS_SMatrices = _HTS_SMatrices;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_PStream {
    pub vector_length: usize,
    pub length: usize,
    pub width: usize,
    pub par: *mut *mut f64,
    pub sm: HTS_SMatrices,
    pub win_size: usize,
    pub win_l_width: *mut ::std::os::raw::c_int,
    pub win_r_width: *mut ::std::os::raw::c_int,
    pub win_coefficient: *mut *mut f64,
    pub msd_flag: *mut HTS_Boolean,
    pub gv_mean: *mut f64,
    pub gv_vari: *mut f64,
    pub gv_switch: *mut HTS_Boolean,
    pub gv_length: usize,
}
#[test]
fn bindgen_test_layout__HTS_PStream() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_PStream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_PStream>(),
        144usize,
        concat!("Size of: ", stringify!(_HTS_PStream))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_PStream>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_PStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(vector_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(par)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(sm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(win_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_l_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(win_l_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_r_width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(win_r_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win_coefficient) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(win_coefficient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msd_flag) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(msd_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_mean) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(gv_mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_vari) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(gv_vari)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_switch) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(gv_switch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_length) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStream),
            "::",
            stringify!(gv_length)
        )
    );
}
pub type HTS_PStream = _HTS_PStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_PStreamSet {
    pub pstream: *mut HTS_PStream,
    pub nstream: usize,
    pub total_frame: usize,
}
#[test]
fn bindgen_test_layout__HTS_PStreamSet() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_PStreamSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_PStreamSet>(),
        24usize,
        concat!("Size of: ", stringify!(_HTS_PStreamSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_PStreamSet>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_PStreamSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStreamSet),
            "::",
            stringify!(pstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStreamSet),
            "::",
            stringify!(nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_frame) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_PStreamSet),
            "::",
            stringify!(total_frame)
        )
    );
}
pub type HTS_PStreamSet = _HTS_PStreamSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_GStream {
    pub vector_length: usize,
    pub par: *mut *mut f64,
}
#[test]
fn bindgen_test_layout__HTS_GStream() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_GStream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_GStream>(),
        16usize,
        concat!("Size of: ", stringify!(_HTS_GStream))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_GStream>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_GStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStream),
            "::",
            stringify!(vector_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStream),
            "::",
            stringify!(par)
        )
    );
}
pub type HTS_GStream = _HTS_GStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_GStreamSet {
    pub total_nsample: usize,
    pub total_frame: usize,
    pub nstream: usize,
    pub gstream: *mut HTS_GStream,
    pub gspeech: *mut f64,
}
#[test]
fn bindgen_test_layout__HTS_GStreamSet() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_GStreamSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_GStreamSet>(),
        40usize,
        concat!("Size of: ", stringify!(_HTS_GStreamSet))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_GStreamSet>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_GStreamSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_nsample) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStreamSet),
            "::",
            stringify!(total_nsample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_frame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStreamSet),
            "::",
            stringify!(total_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStreamSet),
            "::",
            stringify!(nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gstream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStreamSet),
            "::",
            stringify!(gstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gspeech) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_GStreamSet),
            "::",
            stringify!(gspeech)
        )
    );
}
pub type HTS_GStreamSet = _HTS_GStreamSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Condition {
    pub sampling_frequency: usize,
    pub fperiod: usize,
    pub audio_buff_size: usize,
    pub stop: HTS_Boolean,
    pub volume: f64,
    pub msd_threshold: *mut f64,
    pub gv_weight: *mut f64,
    pub phoneme_alignment_flag: HTS_Boolean,
    pub speed: f64,
    pub stage: usize,
    pub use_log_gain: HTS_Boolean,
    pub alpha: f64,
    pub beta: f64,
    pub additional_half_tone: f64,
    pub duration_iw: *mut f64,
    pub parameter_iw: *mut *mut f64,
    pub gv_iw: *mut *mut f64,
}
#[test]
fn bindgen_test_layout__HTS_Condition() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Condition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Condition>(),
        136usize,
        concat!("Size of: ", stringify!(_HTS_Condition))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Condition>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Condition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampling_frequency) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(sampling_frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fperiod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(fperiod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio_buff_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(audio_buff_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volume) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msd_threshold) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(msd_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_weight) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(gv_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phoneme_alignment_flag) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(phoneme_alignment_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_log_gain) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(use_log_gain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additional_half_tone) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(additional_half_tone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration_iw) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(duration_iw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_iw) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(parameter_iw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gv_iw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Condition),
            "::",
            stringify!(gv_iw)
        )
    );
}
pub type HTS_Condition = _HTS_Condition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTS_Engine {
    pub condition: HTS_Condition,
    pub audio: HTS_Audio,
    pub ms: HTS_ModelSet,
    pub label: HTS_Label,
    pub sss: HTS_SStreamSet,
    pub pss: HTS_PStreamSet,
    pub gss: HTS_GStreamSet,
}
#[test]
fn bindgen_test_layout__HTS_Engine() {
    const UNINIT: ::std::mem::MaybeUninit<_HTS_Engine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTS_Engine>(),
        424usize,
        concat!("Size of: ", stringify!(_HTS_Engine))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTS_Engine>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTS_Engine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(audio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sss) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(sss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pss) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(pss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gss) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTS_Engine),
            "::",
            stringify!(gss)
        )
    );
}
pub type HTS_Engine = _HTS_Engine;
extern "C" {
    pub fn HTS_Engine_initialize(engine: *mut HTS_Engine);
}
extern "C" {
    pub fn HTS_Engine_load(
        engine: *mut HTS_Engine,
        voices: *mut *mut ::std::os::raw::c_char,
        num_voices: usize,
    ) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_set_sampling_frequency(engine: *mut HTS_Engine, i: usize);
}
extern "C" {
    pub fn HTS_Engine_get_sampling_frequency(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_set_fperiod(engine: *mut HTS_Engine, i: usize);
}
extern "C" {
    pub fn HTS_Engine_get_fperiod(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_set_audio_buff_size(engine: *mut HTS_Engine, i: usize);
}
extern "C" {
    pub fn HTS_Engine_get_audio_buff_size(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_set_stop_flag(engine: *mut HTS_Engine, b: HTS_Boolean);
}
extern "C" {
    pub fn HTS_Engine_get_stop_flag(engine: *mut HTS_Engine) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_set_volume(engine: *mut HTS_Engine, f: f64);
}
extern "C" {
    pub fn HTS_Engine_get_volume(engine: *mut HTS_Engine) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_msd_threshold(engine: *mut HTS_Engine, stream_index: usize, f: f64);
}
extern "C" {
    pub fn HTS_Engine_get_msd_threshold(engine: *mut HTS_Engine, stream_index: usize) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_gv_weight(engine: *mut HTS_Engine, stream_index: usize, f: f64);
}
extern "C" {
    pub fn HTS_Engine_get_gv_weight(engine: *mut HTS_Engine, stream_index: usize) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_speed(engine: *mut HTS_Engine, f: f64);
}
extern "C" {
    pub fn HTS_Engine_set_phoneme_alignment_flag(engine: *mut HTS_Engine, b: HTS_Boolean);
}
extern "C" {
    pub fn HTS_Engine_set_alpha(engine: *mut HTS_Engine, f: f64);
}
extern "C" {
    pub fn HTS_Engine_get_alpha(engine: *mut HTS_Engine) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_beta(engine: *mut HTS_Engine, f: f64);
}
extern "C" {
    pub fn HTS_Engine_get_beta(engine: *mut HTS_Engine) -> f64;
}
extern "C" {
    pub fn HTS_Engine_add_half_tone(engine: *mut HTS_Engine, f: f64);
}
extern "C" {
    pub fn HTS_Engine_set_duration_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
        f: f64,
    );
}
extern "C" {
    pub fn HTS_Engine_get_duration_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
    ) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_parameter_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
        stream_index: usize,
        f: f64,
    );
}
extern "C" {
    pub fn HTS_Engine_get_parameter_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
        stream_index: usize,
    ) -> f64;
}
extern "C" {
    pub fn HTS_Engine_set_gv_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
        stream_index: usize,
        f: f64,
    );
}
extern "C" {
    pub fn HTS_Engine_get_gv_interpolation_weight(
        engine: *mut HTS_Engine,
        voice_index: usize,
        stream_index: usize,
    ) -> f64;
}
extern "C" {
    pub fn HTS_Engine_get_total_state(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_set_state_mean(
        engine: *mut HTS_Engine,
        stream_index: usize,
        state_index: usize,
        vector_index: usize,
        f: f64,
    );
}
extern "C" {
    pub fn HTS_Engine_get_state_mean(
        engine: *mut HTS_Engine,
        stream_index: usize,
        state_index: usize,
        vector_index: usize,
    ) -> f64;
}
extern "C" {
    pub fn HTS_Engine_get_state_duration(engine: *mut HTS_Engine, state_index: usize) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_nvoices(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_nstream(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_nstate(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_fullcontext_label_format(
        engine: *mut HTS_Engine,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HTS_Engine_get_fullcontext_label_version(
        engine: *mut HTS_Engine,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HTS_Engine_get_total_frame(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_nsamples(engine: *mut HTS_Engine) -> usize;
}
extern "C" {
    pub fn HTS_Engine_get_generated_parameter(
        engine: *mut HTS_Engine,
        stream_index: usize,
        frame_index: usize,
        vector_index: usize,
    ) -> f64;
}
extern "C" {
    pub fn HTS_Engine_get_generated_speech(engine: *mut HTS_Engine, index: usize) -> f64;
}
extern "C" {
    pub fn HTS_Engine_synthesize_from_fn(
        engine: *mut HTS_Engine,
        fn_: *const ::std::os::raw::c_char,
    ) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_synthesize_from_strings(
        engine: *mut HTS_Engine,
        lines: *mut *mut ::std::os::raw::c_char,
        num_lines: usize,
    ) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_generate_state_sequence_from_fn(
        engine: *mut HTS_Engine,
        fn_: *const ::std::os::raw::c_char,
    ) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_generate_state_sequence_from_strings(
        engine: *mut HTS_Engine,
        lines: *mut *mut ::std::os::raw::c_char,
        num_lines: usize,
    ) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_generate_parameter_sequence(engine: *mut HTS_Engine) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_generate_sample_sequence(engine: *mut HTS_Engine) -> HTS_Boolean;
}
extern "C" {
    pub fn HTS_Engine_save_information(engine: *mut HTS_Engine, fp: *mut FILE);
}
extern "C" {
    pub fn HTS_Engine_save_label(engine: *mut HTS_Engine, fp: *mut FILE);
}
extern "C" {
    pub fn HTS_Engine_save_generated_parameter(
        engine: *mut HTS_Engine,
        stream_index: usize,
        fp: *mut FILE,
    );
}
extern "C" {
    pub fn HTS_Engine_save_generated_speech(engine: *mut HTS_Engine, fp: *mut FILE);
}
extern "C" {
    pub fn HTS_Engine_save_riff(engine: *mut HTS_Engine, fp: *mut FILE);
}
extern "C" {
    pub fn HTS_Engine_refresh(engine: *mut HTS_Engine);
}
extern "C" {
    pub fn HTS_Engine_clear(engine: *mut HTS_Engine);
}
